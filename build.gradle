import org.apache.tools.ant.filters.ReplaceTokens
import java.text.SimpleDateFormat
import org.ajoberstar.grgit.*


configurations { ftpAntTask }

dependencies {
	ftpAntTask("org.apache.ant:ant-commons-net:1.9.4") {
		module("commons-net:commons-net:1.4.1") { dependencies "oro:oro:2.0.8:jar" }
	}
}

apply plugin: 'java'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'maven'
apply plugin: 'com.diffplug.gradle.spotless'
apply plugin: 'eclipse'

sourceCompatibility = 1.8
targetCompatibility = 1.8

if (version == 'unspecified') {
	version = getVersionName()
}

ext.repo = Grgit.open(project.file('.'))

spotless {
	java {
		eclipseFormatFile 'build-resources/eclipse.prefs.formatter.xml'
	}

	format 'misc', {
		target '**/*.gradle', '**/*.md', '**/.gitignore'

		// spotless has built-in rules for the most basic formatting tasks
		trimTrailingWhitespace()
		indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
	}
}


configurations {
	deployerJars
}


task wrapper(type: Wrapper) {
	gradleVersion='2.1'
}

install {
	repositories.mavenInstaller {
		pom.version = project.version;
		pom.artifactId = 'rplib';
		pom.groupId = 'net.rptools.rplib';
	}
}


uploadArchives {
	repositories.mavenDeployer {
		pom.version = project.version;
		pom.artifactId = 'rplib';
		pom.groupId = 'net.rptools.rplib';
		configuration = configurations.deployerJars;
		repository url: 'file://' + projectDir + '/../maven-repo'
	}
}

buildscript {
	repositories {
		mavenCentral()
		jcenter()
		maven {
			url 'https://plugins.gradle.org/m2/'
		}
	}
	dependencies {
		classpath 'org.ajoberstar:gradle-git:0.11.2'
		classpath 'com.diffplug.gradle.spotless:spotless:1.3.0-SNAPSHOT'
	}
}


dependencies {
	compile 'rhino:js:1.6R5'
	compile 'antlr:antlr:2.7.6'
	compile 'commons-io:commons-io:2.4'
	compile 'com.thoughtworks.xstream:xstream:1.4.1'
	compile 'commons-lang:commons-lang:2.6'
	compile 'commons-logging:commons-logging:1.1.1'
	compile 'commons-net:commons-net:3.2'
	compile 'log4j:log4j:1.2.16'
	compile 'com.withay:withay-util:1.0'
	compile 'de.huxhorn.sulky:de.huxhorn.sulky.3rdparty.jlayer:1.0'
	compile 'net.java.abeille:abeille-formsrt:2.0'
	testCompile group: 'junit', name: 'junit', version: '4.11'
	deployerJars 'org.apache.maven.wagon:wagon-ssh:2.2'
}

ext.compileDate = new Date();
ext.yyyymmdd = (new SimpleDateFormat('yyyyMMDD')).format(ext.compileDate);


repositories {
	mavenLocal()
	mavenCentral()
	maven {
		url = 'http://maptool.craigs-stuff.net/repo/'
	}
}

/*
* Gets the version name from the latest Git tag
*/
def getVersionName() {
	if (project.hasProperty('buildVersion')) {
		return buildVersion
	} else {
		String vtxtVersionNo = new File('build-resources/version.txt').text.trim()
		return vtxtVersionNo
	}
}

findbugs {
	ignoreFailures = true
	toolVersion = '3.0.0'
	effort = 'max'
	sourceSets = []  // Empty source set so it wont run during build/check
}

pmd {
	ignoreFailures = true
	sourceSets = []  // Empty source set so it wont run during tebuild/check
}

task showBuildVersion() << {
	println 'Build Version Number = ' + project.version
}

jar {
	manifest {
		attributes 'Implementation-Title': 'rplib',
				'Implementation-Version': project.version,
				'Built-By': System.getProperty('user.name'),
				'Built-Date': new Date(),
				'Built-JDK': System.getProperty('java.version'),
				'Source-Compatibility': project.sourceCompatibility,
				'Target-Compatibility': project.targetCompatibility
	}
}

task ftpUpdateRelease (dependsOn: uploadArchives) << {
	println "Uploading via FTP the maven repo at: " + "../maven-repo"
	println "To remote server: " + ftpServer
	println "Remote directory: " + ftpRemoteDir

	ant {
		taskdef(name: 'ftp',
		classname: 'org.apache.tools.ant.taskdefs.optional.net.FTP',
		classpath: configurations.ftpAntTask.asPath)
		ftp(server: ftpServer, userid: ftpUserID, password: ftpPassword, remoteDir: ftpRemoteDir) {
			fileset(dir: "../maven-repo")
		}
	}
}