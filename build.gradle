/*
 * The goal is for this build file to be usable for all RPTools library
 * projects in the future.  When you make changes, keep that in mind and
 * try to use variables for things that will be different from library
 * to library, preferably with a function that can automatically
 * determine the value...
 */
import org.apache.tools.ant.filters.ReplaceTokens
import java.text.SimpleDateFormat
import org.ajoberstar.grgit.*

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven {
            // Currently holds withay-util and abeille-formsrt
            url "http://maptool.craigs-stuff.net/repo/"
        }
    }
    dependencies {
        classpath 'org.ajoberstar:gradle-git:0.11.2'
        classpath 'com.diffplug.gradle.spotless:spotless:1.3.0-SNAPSHOT'
    }
}

plugins {
    id "com.jfrog.bintray" version "1.7.3"
    id "maven-publish"
    id "java-library"   // Solution for gradle issue#1118
    id "java"
    id 'findbugs'
    id 'pmd'
    id 'maven'
    id 'com.diffplug.gradle.spotless' version "1.3.0"
    id 'eclipse'
}

ext.gitrepo = Grgit.open(project.file('.'))
ext.compileDate = new Date();
ext.yyyymmdd = (new SimpleDateFormat('yyyyMMDD')).format(ext.compileDate);

String reponame = 'RPTools'
String repourl = 'github.com/'+reponame+'/'+project.name
String userOrganization = 'rptools'
String description = 'General library of role-playing appropriate functionality'
String libName = 'RP lib'

sourceCompatibility = 1.8

version = getVersionName()

spotless {
    java {
        eclipseFormatFile 'build-resources/eclipse.prefs.formatter.xml'
    }
    format 'misc', {
        target '**/*.gradle', '**/*.md', '**/.gitignore'

        // spotless has built-in rules for the most basic formatting tasks
        trimTrailingWhitespace()
        indentWithSpaces(4)
    }
}

// Travis is now using Gradle 4.0 by default (required by Java9) so
// maybe we don't need to specify something more recent than that...
task wrapper(type: Wrapper) {
    gradleVersion = '4.5.1'
}

dependencies {
    compile 'antlr:antlr:2.7.6'
    compile 'commons-io:commons-io:2.4'
    compile 'com.thoughtworks.xstream:xstream:1.4.10'
    compile 'commons-lang:commons-lang:2.6'
    compile 'commons-logging:commons-logging:1.1.1'
    compile 'commons-net:commons-net:3.2'
    compile 'log4j:log4j:1.2.16'
    compile 'com.withay:withay-util:1.0'
    compile 'de.huxhorn.sulky:de.huxhorn.sulky.3rdparty.jlayer:1.0'
    compile 'net.java.abeille:abeille-formsrt:2.0'
    testCompile 'junit:junit:4.11'
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
        // Currently holds withay-util and abeille-formsrt
        url "http://maptool.craigs-stuff.net/repo/"
    }
}

def pomConfig = {
    licenses {
        license {
            name "The Lesser General Public License, v3.0"
            url "http://www.gnu.org/licenses/"
            distribution "repo"
        }
    }
    developers {
        developer {
            id userOrganization     // 'rptools'
            name userOrganization   // 'rptools'
            email "support@rptools.net"
        }
    }
    scm {
        url "https://"+repourl
    }
}

publishing {
    publications {
        bintrayPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            artifactId = project.name
            version    = project.version
            groupId    = 'net.rptools.'+project.name;
            pom.withXml {
                def root = asNode()
                root.appendNode('description', description)
                root.appendNode('name', libName)
                root.appendNode('url', "https://"+repourl)
                root.children().last() + pomConfig
            }
        }
    }
}

bintray {
    user = System.getProperty('bintray.user')
    key = System.getProperty('bintray.key')
    String publishProperty = System.getProperty('publish')
    publications = ['bintrayPublication']

    // Whether to run this as dry-run, without deploying
    dryRun = false

    // Whether version should be auto published after an upload
    publish = (publishProperty == "true")
    if (publish) {
        println "Publishing uploaded files for " + getVersionName()
    } else {
        println "Not publishing uploaded files for " + getVersionName()
    }

    // Whether to override version artifacts already published
    override = true

    pkg {
        // result is 'rptools/RPTools/rplib'
        userOrg = userOrganization
        repo = reponame
        name = project.name

        // The rest of these are supposed to establish the contents of
        // the various fields at the bintray site, but so far they
        // haven't seemed to propagate.  Will figure out why at some
        // point (but I have hand-edited the 1419 details).
        desc = description
        licenses = ['LGPL-3.0']
        websiteUrl = 'http://'+repourl
        issueTrackerUrl = 'http://'+repourl+'/issues'
        vcsUrl = 'https://'+repourl+'.git'
        //labels = ['blah', 'yada', 'meh']
        publicDownloadNumbers = true
        githubRepo = reponame+'/'+userOrg
        githubReleaseNotesFile = 'README.md'
        version {
            name = getVersionName()
            // It would be nice if 'desc' could contain "dev" when the
            // third field is an odd number and "stable" when the third
            // field is an even number...  Too much work right now.
            desc = "Description of " + name     // Where does this show up?
            released = new Date()
            vcsTag = name
            // At some point, we may want to publish to Maven, but these
            // are unused for now.
            gpg {
                sign = true
                passphrase = 'my_passphrase'
            }
            mavenCentralSync {
                sync = false
                user = 'rptools'
                password = 'password'
                close = '1'
            }
        }
    }
}

/*
 * Gets the version name from
 *   1. The command line (allows using $TRAVIS_TAG),
 *   2. 'gradle.properties' (for development builds), or
 *   3. 'build-resources/version.txt' (the 'official' version number).
 */
def getVersionName() {
    String vers = System.getProperty('version')
    if (vers != null && vers != '')
        return vers
    if (project.hasProperty('buildVersion'))
        return buildVersion
    vers = new File('build-resources/version.txt').text.trim()
    return vers
}

findbugs {
    ignoreFailures = true
    toolVersion = '3.0.0'
    effort = 'max'
    sourceSets = []  // Empty source set so it wont run during build/check
}

pmd {
    ignoreFailures = true
    sourceSets = []  // Empty source set so it wont run during tebuild/check
}

jar {
    manifest {
        attributes  'Implementation-Title': project.name,
                    'Implementation-Version': project.version,
                    'Built-By': System.getProperty('user.name'),
                    'Built-Date': new Date(),
                    'Built-JDK': System.getProperty('java.version'),
                    'Source-Compatibility': project.sourceCompatibility
    }
    /*
    // If I include this line, I also have to list include() lines for
    // all files.  That's not just .class files, as it can include
    // images and XML files as well.  Maybe the include could just grab
    // _everything_, since the build directory should only contain what
    // goes into the JAR, but I don't want to rely on that until there's
    // been more testing.  Remember: we want this build file to work for
    // all RPTools libraries in the future...
    include("packages/license/COPYING.LGPLv3")
    */
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'      // Added to the end of the filename
    from sourceSets.main.allSource
}

javadoc.failOnError = false
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'      // Added to the end of the filename
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
